AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: >
  This template creates a CodePipeline pipeline for serverless web applications that a) pulls source from github,
  b) builds the a serverless web application and c) sets up a CloudFront distribution

Parameters:
  GitHubOAuthToken:
    Description: OAuth token used by AWS CodePipeline to connect to GitHub
    NoEcho: true
    Type: String
  GitHubOwner:
    Description: GitHub username owning the repo
    Type: String
  GitHubRepo:
    Description: GitHub repo name
    Type: String
  GitHubBranch:
    Description: GitHub repo branch name. It defaults to master if not specified.
    Type: String
    Default: master
  FrontendBucketName:
    Description: Bucket name for frontend. Must be all lower case, numbers and '-', '_'
    Type: String
  UseMockData:
    Description: Set true to use mock data for testing purposes
    Type: String
  CloudfrontDistribution:
    Description: Id for Cloudfront Distribution, used to invalidate files to reset cache
    Type: String

Resources:
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref ArtifactStoreBucket
          - Name: REACT_APP_USE_MOCK
            Type: PLAINTEXT
            Value: !Ref UseMockData
          - Name: REACT_APP_AWS_REGION
            Type: PLAINTEXT
            Value: !Ref 'AWS::Region'
      Source:
        Type: CODEPIPELINE

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location:
          Ref: ArtifactStoreBucket
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                OAuthToken: !Ref GitHubOAuthToken
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !GetAtt CodeBuildProject.Arn
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CleanUpS3Bucket
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref CleanUpBucketBeforeDeploy
                UserParameters: !Sub '{"bucket_name": "${FrontendBucketName}"}'
              RunOrder: 1
            - Name: MoveApplicationtoS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                BucketName: !Ref FrontendBucketName
                Extract: true
              RunOrder: 2
            - Name: InvalidateDistribution
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref InvalidateCloudfrontDistribution
                UserParameters: !Sub '{"distribution_id": "${CloudfrontDistribution}"}'
              RunOrder: 3

  InvalidateCloudfrontDistribution:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import sys
          import json
          import datetime
          import traceback

          def handler(event, context):
              client = boto3.client('cloudfront')

              print(json.dumps(event, default=str))

              timestamp_string = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")
              data = event['CodePipeline.job']['data']
              param = json.loads(data['actionConfiguration']['configuration'].get('UserParameters','{}'))
              distributionId = param['distribution_id']

              codepipeline = boto3.client('codepipeline')
              job = event['CodePipeline.job']['id'];
              try:
                response = client.create_invalidation(
                    DistributionId=distributionId,
                    InvalidationBatch={
                        'Paths': {
                            'Quantity': 1,
                            'Items': [
                                '/*',
                            ]
                        },
                        'CallerReference': timestamp_string
                    }
                )

                print(json.dumps(response, default=str))

                waiter = client.get_waiter('invalidation_completed')

                # Waits up to 10 mins
                waiter.wait(
                  DistributionId=distributionId,
                  Id=invalidation_id
                )
              except:
                traceback.print_exc()
                print("Exception:",sys.exc_info()[0])
                codepipeline.put_job_failure_result(jobId=job);
                return "Invalidation failed"

              codepipeline.put_job_success_result(jobId=job);
              return "Invalidation complete"
      Role: !GetAtt InvalidateCloudfrontDistributionFunctionRole.Arn
      Handler: index.handler
      Description: Lambda to invalidate Cloudfront distribution
      Runtime: python3.7
      Timeout: 900

  CleanUpBucketBeforeDeploy:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import sys
          from botocore.vendored import requests


          def handler(event, context):
              codepipeline = boto3.client('codepipeline')
              job = event['CodePipeline.job']['id'];

              try:
                  data = event['CodePipeline.job']['data']
                  param = json.loads(data['actionConfiguration']['configuration'].get('UserParameters','{}'))
                  bucket = param['bucket_name']

                  s3 = boto3.resource('s3')
                  bucket = s3.Bucket(bucket)
                  for obj in bucket.objects.filter():
                      s3.Object(bucket.name, obj.key).delete()
                  codepipeline.put_job_success_result(jobId=job);
              except:
                  print("Exception:",sys.exc_info()[0])
                  codepipeline.put_job_failure_result(jobId=job);

      Role: !GetAtt CleanUpBucketBeforeDeployFunctionRole.Arn
      Handler: index.handler
      Description: Lambda to clean S3 bucket before deploy
      Runtime: python3.7
      Timeout: 30

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:ListBucket'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Effect: Allow
                Resource:
                  - !Sub ${ArtifactStoreBucket.Arn}/*
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${FrontendBucketName}/*
              - Action:
                  - 'lambda:InvokeFunction'
                Effect: Allow
                Resource:
                  - !GetAtt InvalidateCloudfrontDistribution.Arn
                  - !GetAtt CleanUpBucketBeforeDeploy.Arn
              - Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Effect: Allow
                Resource: !GetAtt CodeBuildProject.Arn
              - Action:
                  - 'ssm:getParameters'
                Effect: Allow
                Resource: '*'

  InvalidateCloudfrontDistributionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: InvalidateCloudformationDistributionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudfront:CreateInvalidation'
                  - 'codepipeline:PutJobSuccessResult'
                  - 'codepipeline:PutJobFailureResult'
                Resource: '*'

  CleanUpBucketBeforeDeployFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: InvalidateCloudformationDistributionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:DeleteObject'
                  - 'codepipeline:PutJobSuccessResult'
                  - 'codepipeline:PutJobFailureResult'
                Resource: '*'

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:*'
        - PolicyName: BucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactStoreBucket}/*'
        - PolicyName: secretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                  - 'secretsmanager:GetSecretValue'
                Resource: '*'

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
